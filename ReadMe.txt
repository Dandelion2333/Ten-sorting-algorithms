此项目的目的：
    1、学习数据结构中的十种排序算法，具体涉及到算法的原理、算法的实现方法、算法的相关知识
    2、使用Python作为实现工具，进一步加深对Python的学习

项目开始的时间：
    2020.02.04  周二

项目进度：（V1.0）
2020.02.04  周二
    1、建立基本数据结构，数组数据形成
    2、实现选择排序
2020。02.08 周六
    1、学习、实现快速排序
    2、学习、实现插入排序



名词定义：
    1、稳定性： 假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，
        ri=rj，排序之后仍然ri=rj。进一步讲，排序前ri在rj之前，而在排序后的序列中，ri仍在rj之前，则称这种排序算法是稳定的；
        否则称为不稳定的。

算法原理及属性：
    1、选择排序
        1、原理
            每次都选择数组中最小的数，将其依次从第零个放入，直到最后。
        2、属性
            时间复杂度：由于每次都会遍历一遍数组，选出最小的数据。假设有n个数据，则总共需要比对n²。也就是平均复杂度为n²，同理最坏情况下也是如此。
                那么，最好的情况呢？其实也是，原因为，即使是顺序排列，按照原理可知，也需要两个循环。
            空间复杂度：不会暂用其他空间，只要本数组即可，即为1。
            稳定性：为不稳定。
                用数组5,8,5,2,9的例子解释。第一次，选择2为最小值，其与第零位的5交换位置，那么，排序后两个五的相对位置与排序前的
                    相对位置就产生了变化。即为不稳定的

    2、快速排序
        1、原理
            选择第一个数作为基数，比它小的放左边，比它大的放右边，完成一轮对比之后，以基数作为分界线，左右两边两组数据，再用同样的方法排序
                直到最终排序完成
        2、属性
            时间复杂度：平均的时间复杂度为O(nlogn)，最好的情况也是如此，最坏的情况是n²
            空间复杂度：虽然递归的时候会存一些数据，但是，总体还是在常数级。再者它只需要在自身的数组中交换数据，不需要额外开辟空间
            稳定性：为不稳定
                这个很好理解，就拿两个相同的数来说，在比对、交换的过程中，他们之间的相对位置肯定会被改变。
        3、其他
            快速排序的理论核心在于与基数的比对，然后产生两组特别数据，然后对这两组是数据进行与上个步骤相同的处理
            既然都为相同操作，那么就用用到递归，在代码上要特别注意递归的使用，所以引入begin与end是非常好的操作。

    3、插入排序
        1、原理
            可以看作是把一个数据插入到一个有序数据中，一般都是从后面插入。
            从第一个开始，它已经是有序数据了，将他与第二个进行比较，假如大于后者，则把后者插入到前面。
        2、属性 
            时间复杂度：由于它也是两曾循环，所以平均复杂度肯定是n²，最坏的情况也是如此。最好的情况则是排好顺序的数据，则第二层循环用不上
                不需要移动数据，所以为n
            空间复杂度：不会暂用其他空间，只要本数组即可，即为1。
            稳定性：为稳定 
                因为插入的原则是，当两个数据相同时，不用处理，也就是不用插入到前一个数据的前面，那么他们的相对位置就没有任何变化。
        3、其他
            我在实现插入排序时，把问题复杂化了，用了很多变量来表示，结果越来越乱。解决问题的关键在于要插入的数据与它的编号。然后根据编号
                向左移动，此时的移动用一个while循环做，判断的条件是插入数据大于它的前一个数据。